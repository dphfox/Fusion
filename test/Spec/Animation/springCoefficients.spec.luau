--!strict
--!nolint LocalUnused
local task = nil -- Disable usage of Roblox's task scheduler

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Fusion = ReplicatedStorage.Fusion

local springCoefficients = require(Fusion.Animation.springCoefficients)

return function()
	local it = getfenv().it

	it("should return the identity matrix for zero time", function()
		local expect = getfenv().expect

		local posPos, posVel, velPos, velVel = springCoefficients(0, 5.1, 3.4)

		expect(posPos).to.equal(1)
		expect(posVel).to.equal(0)
		expect(velPos).to.equal(0)
		expect(velVel).to.equal(1)
	end)

	it("should return the identity matrix for zero speed", function()
		local expect = getfenv().expect

		local posPos, posVel, velPos, velVel = springCoefficients(5.1, 3.4, 0)

		expect(posPos).to.equal(1)
		expect(posVel).to.equal(0)
		expect(velPos).to.equal(0)
		expect(velVel).to.equal(1)
	end)

	-- FUTURE: these tests use numbers generated by the code, which may include
	-- some numerical imprecision. For best results, these numbers should
	-- eventually be replaced by results from a proper mathematical program with
	-- infinite precision.

	local ERROR_MARGIN = 0.00001

	it("should return reasonable underdamped values", function()
		local expect = getfenv().expect

		local posPos, posVel, velPos, velVel = springCoefficients(3.6, 0.2, 6.3)

		expect(posPos).to.be.near(-0.010932478209024278, ERROR_MARGIN)
		expect(posVel).to.be.near(-0.002500054168246333, ERROR_MARGIN)
		expect(velPos).to.be.near(0.002500054168246333, ERROR_MARGIN)
		expect(velVel).to.be.near(-0.009932456541725745, ERROR_MARGIN)
	end)

	it("should return reasonable critically damped values", function()
		local expect = getfenv().expect

		local posPos, posVel, velPos, velVel = springCoefficients(0.24, 1, 3.6)

		expect(posPos).to.be.near(0.7856253267423104, ERROR_MARGIN)
		expect(posVel).to.be.near(0.10115347554622023, ERROR_MARGIN)
		expect(velPos).to.be.near(-1.310949043079014, ERROR_MARGIN)
		expect(velVel).to.be.near(0.057320302809524805, ERROR_MARGIN)
	end)

	it("should return reasonable overdamped values", function()
		local expect = getfenv().expect
		
		local posPos, posVel, velPos, velVel = springCoefficients(1.74, 8.4, 7.2)

		expect(posPos).to.be.near(0.4748290157123269, ERROR_MARGIN)
		expect(posVel).to.be.near(0.003939512259321826, ERROR_MARGIN)
		expect(velPos).to.be.near(-0.2042243155232435, ERROR_MARGIN)
		expect(velVel).to.be.near(-0.0016943871752413216, ERROR_MARGIN)
	end)
end